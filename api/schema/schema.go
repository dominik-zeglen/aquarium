package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _api_schema_schema_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func api_schema_schema_go() ([]byte, error) {
	return bindata_read(
		_api_schema_schema_go,
		"api/schema/schema.go",
	)
}

var _api_schema_schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x98\x9b\xf3\x0a\xbc\xe5\x33\x92\xaf\x06\x7a\x48\xd1\x02\x3d\x04\x3d\xac\xa9\x8d\xbc\x00\xb5\x54\x49\x2a\xb5\x51\xe4\xdd\x8b\x25\x25\x51\x7f\xf0\x8d\x3f\xc3\xd9\x99\x21\x97\xc4\x5d\x1f\xd5\xab\x23\x8e\xa7\x34\xfc\x5b\x29\x75\xd5\xea\xc5\x3a\x88\x0f\x95\x52\xb7\x69\xfc\x59\x55\x19\xfd\xe4\x11\x0a\x38\x44\xf0\x51\xcf\x28\xe4\x14\x72\xbd\x5e\x0a\x06\x2c\x6a\x75\xe2\x58\x98\x8e\x68\xed\x0b\xd9\x88\x3e\x51\x81\x47\xd0\x85\x5e\x70\xf1\xd6\x61\x26\xba\xaf\x2c\xe1\x4e\x11\x3d\x44\x72\xfc\xea\x9d\xf1\x98\x86\xe9\x98\x81\x69\x09\xb5\xfa\xcf\x39\x8b\xc0\xc2\xd1\xc2\xf5\x58\x27\x51\xc3\xec\x0b\x52\x73\x89\xb3\x2a\x2d\xf1\x1c\x41\xbc\x41\x84\x0e\x0d\x61\xd0\xea\x7b\x1e\x1c\x1d\x33\x1a\xa9\xbd\xa3\xec\x27\x84\x88\x49\x53\x0b\xd7\x1f\xce\xa2\x07\x36\xb8\xac\xb7\xb7\x1c\xdd\x95\x0c\xc5\x3b\x9e\x73\x82\x96\x3e\x50\x52\x3d\xba\x9e\xe3\x24\xdb\x6c\x56\xb8\x6f\xcf\xe8\xa7\x69\x57\x02\xd3\xbb\x31\x0a\xe8\x8f\x68\xd7\x2b\x2f\x45\xc9\xc6\x7e\x8e\x7e\x51\x16\xeb\x46\x92\x7a\xdb\x60\x9f\xeb\x06\x1f\x7e\xdd\x21\x13\x40\x22\x64\x57\xe3\x94\xf5\xe6\x40\x82\x50\xb9\x30\x03\x9e\xe9\xc3\x79\x5c\x64\x11\xb4\xca\x21\x95\x9b\x12\xa5\x1c\xfa\xb6\x1b\x32\xc8\xe0\x9a\x30\x8a\xdc\xe8\x89\x1b\xd1\xa7\x14\xb6\xe8\x1b\xac\x9f\x8a\xa9\xf7\x9e\x9b\x0b\x4d\xd3\x0b\xfa\xf3\xb2\x24\x43\x2b\x92\x33\xc9\xa4\x78\xa9\xe0\x4e\x58\x4b\xe0\x3a\xa9\xed\xee\x2c\x26\xd9\x5c\x42\xd7\x01\xa5\x17\xb3\xe8\x89\xb3\xf3\x3c\x73\x67\xa0\x83\xfc\xf2\x46\xbb\xce\x95\xe3\x97\xae\xbc\x21\x17\x28\x87\x97\xfa\x35\xb5\x06\x44\x82\x45\xa0\xeb\x66\xd9\x5c\xe0\xff\x9e\xea\x67\x8b\x2d\x0e\x1d\xbf\xc7\x3a\x72\x8c\xcf\x68\x1e\xc7\xb7\x1e\xfd\x2d\x87\x89\xd6\x1e\x46\xa7\x8f\x39\x8b\x61\xf9\x2b\x85\x78\x78\x4f\x1f\x8f\x9e\x7d\x42\x8f\xdb\x67\x51\xca\xcd\xa9\x86\xba\x65\x53\x08\x77\x3f\x80\x09\x21\xbe\x0e\xab\x0f\x4e\xa8\xde\xb6\xbe\xc5\x8e\x5c\xd2\xd8\x67\xb3\x96\x4b\x3e\x83\xb9\x60\x0b\xc9\xe3\x6f\x71\xab\xb3\xe9\xea\xb3\xfa\x17\x00\x00\xff\xff\x1d\xb1\xac\x27\xce\x05\x00\x00")

func api_schema_schema_graphql() ([]byte, error) {
	return bindata_read(
		_api_schema_schema_graphql,
		"api/schema/schema.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"api/schema/schema.go": api_schema_schema_go,
	"api/schema/schema.graphql": api_schema_schema_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"api": &_bintree_t{nil, map[string]*_bintree_t{
		"schema": &_bintree_t{nil, map[string]*_bintree_t{
			"schema.go": &_bintree_t{api_schema_schema_go, map[string]*_bintree_t{
			}},
			"schema.graphql": &_bintree_t{api_schema_schema_graphql, map[string]*_bintree_t{
			}},
		}},
	}},
}}

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _api_schema_schema_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func api_schema_schema_go() ([]byte, error) {
	return bindata_read(
		_api_schema_schema_go,
		"api/schema/schema.go",
	)
}

var _api_schema_schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\xa8\xb7\xf4\x2f\xe8\x96\x05\xeb\x16\x60\xc5\x32\xac\xc0\x0e\xc1\x0e\x8a\xcd\xc6\x04\xf4\xe1\x49\x74\xe7\x60\xe8\x7f\x1f\x24\x59\xb2\xfc\xd1\xdc\x64\x9a\x7c\x7c\xef\x91\x12\xea\xae\x27\x76\x32\xa8\xe9\x18\x8e\xff\x2a\xc6\x06\xce\x9e\xa4\x11\xf4\x50\x31\x76\xcb\xe7\xf7\xaa\x8a\xd9\x7b\x0b\x62\x4a\x76\x24\x2c\xf1\x02\xc2\x57\x81\x6e\x96\x21\x57\x0b\x09\x9c\x1d\x35\x4d\x48\xdf\xed\x55\x68\x74\xea\x09\x25\x81\x0d\x70\xc2\x82\xe0\x53\x0b\x9f\x4b\xb7\x0e\x22\xd8\x7d\x76\x21\xef\x48\x60\x05\xa1\xd1\x27\x6b\x6a\x0b\xe1\x18\xca\x6a\x91\x43\xc0\xd9\x27\x63\x24\x08\xed\x31\x94\x18\x0e\x4d\x20\x36\x7e\x7d\x05\xbc\xb6\x54\x74\x51\xa8\xcb\x0c\xd4\xab\x0c\xd7\x41\x8d\xe0\x38\x3b\xff\x8c\xa7\x87\xdf\x1b\x94\x7e\x09\x47\x10\xc8\x28\x31\xbc\x18\x09\x56\xe8\x1a\xe6\x8d\xb6\xc2\x64\x06\xac\x91\xee\x88\x8d\xd6\x49\x7c\x83\x03\x48\x79\x30\xbd\xa6\xcc\xb7\x5e\x45\x74\xaf\x2e\x60\xf3\x67\x37\x39\xc5\x37\xfd\xf3\x49\x7f\x3d\x77\xbe\xd0\x32\x31\x19\x65\x07\x1e\xd8\xcc\x7a\xbf\xdc\xba\xe0\xcc\x61\x3c\x7b\x6b\x18\x6b\x10\xc8\xdb\x45\x16\xf5\x35\x86\x40\x81\xbd\x42\xb3\x2f\x88\x0a\x05\x9c\x8d\x39\x15\x63\x66\xdc\x17\x0f\x97\x76\xa7\x74\x3a\xc5\x96\x34\x2e\xc6\xea\xfd\xdc\x91\xc4\x28\xb6\xee\x8c\xc3\xa8\x3f\xec\xd9\x6c\xa4\x69\xa2\xb9\x4b\x12\xb2\xec\xb2\x21\xe9\xb5\xd7\xd7\x16\x73\x46\x0b\xf6\x82\x6f\xc6\xc2\x18\x29\x11\x97\x68\x61\x9a\xb3\x45\x6d\xbb\x69\x64\x6b\xbe\x1e\x88\x67\x6e\xab\xc9\x7c\xb1\xd8\x7c\x96\xa0\x60\xbc\x45\xf7\x14\x6f\x2d\xf1\x33\x6a\x7c\x16\xdd\x09\x07\x90\x1f\x01\x78\x03\xdc\xcc\x81\x54\xfd\xa3\x07\x7b\x0b\x65\x69\x84\xbb\x24\xf5\x91\xe7\xb1\x15\xbf\xbf\xa1\xa3\xdd\x6b\x78\x16\xf8\xe2\x99\x78\x5c\x0c\x7f\x62\x5e\x62\x8e\x12\xa6\x9f\x1e\x71\x2e\x2d\xff\xf2\xde\xec\x16\x0f\x8f\xc7\x38\xaf\xbd\x8b\x75\x2a\x9a\xc1\xd9\xb9\xb4\x65\x24\x83\xe9\x8a\x14\xb7\x25\x38\xe1\xea\x16\x94\x08\x2e\xfc\xf1\x7e\xf0\x68\x4b\xf5\x5e\xfd\x0f\x00\x00\xff\xff\x24\xa9\xa0\x77\x86\x05\x00\x00")

func api_schema_schema_graphql() ([]byte, error) {
	return bindata_read(
		_api_schema_schema_graphql,
		"api/schema/schema.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"api/schema/schema.go": api_schema_schema_go,
	"api/schema/schema.graphql": api_schema_schema_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"api": &_bintree_t{nil, map[string]*_bintree_t{
		"schema": &_bintree_t{nil, map[string]*_bintree_t{
			"schema.go": &_bintree_t{api_schema_schema_go, map[string]*_bintree_t{
			}},
			"schema.graphql": &_bintree_t{api_schema_schema_graphql, map[string]*_bintree_t{
			}},
		}},
	}},
}}
